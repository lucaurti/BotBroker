// <auto-generated />
using System;
using Broker.Common.Utility;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Broker.Common.Migrations
{
    [DbContext(typeof(BrokerDBContext))]
    partial class BrokerDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062");

            modelBuilder.Entity("Broker.Common.Utility.MyBalance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<string>("Asset");

                    b.Property<int?>("CandleId");

                    b.Property<DateTime>("Date");

                    b.Property<decimal>("Reserved");

                    b.Property<int?>("SettingsId");

                    b.Property<decimal>("ToEuro");

                    b.HasKey("Id");

                    b.HasIndex("CandleId");

                    b.HasIndex("SettingsId");

                    b.ToTable("MyBalances");
                });

            modelBuilder.Entity("Broker.Common.Utility.MyCandle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Close");

                    b.Property<DateTime>("Date");

                    b.Property<decimal>("High");

                    b.Property<decimal>("Low");

                    b.Property<decimal>("Open");

                    b.Property<int?>("SettingsId");

                    b.HasKey("Id");

                    b.HasIndex("SettingsId");

                    b.ToTable("MyCandles");
                });

            modelBuilder.Entity("Broker.Common.Utility.MyMACD", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CandleId");

                    b.Property<decimal>("FastValue");

                    b.Property<decimal>("Hist");

                    b.Property<decimal>("MACD");

                    b.Property<decimal>("SignalValue");

                    b.Property<decimal>("SlowValue");

                    b.Property<ulong>("Timestamp");

                    b.HasKey("Id");

                    b.HasIndex("CandleId");

                    b.ToTable("MyMACDs");
                });

            modelBuilder.Entity("Broker.Common.Utility.MyMomentum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CandleId");

                    b.Property<decimal>("MomentumValue");

                    b.Property<ulong>("Timestamp");

                    b.HasKey("Id");

                    b.HasIndex("CandleId");

                    b.ToTable("MyMomentums");
                });

            modelBuilder.Entity("Broker.Common.Utility.MyOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<ulong>("Completed");

                    b.Property<ulong>("Creation");

                    b.Property<decimal>("Fee");

                    b.Property<string>("OrderId");

                    b.Property<decimal>("Price");

                    b.Property<int?>("SettingsId");

                    b.Property<int>("State");

                    b.Property<int>("Type");

                    b.Property<decimal>("Volume");

                    b.HasKey("Id");

                    b.HasIndex("SettingsId");

                    b.ToTable("MyOrders");
                });

            modelBuilder.Entity("Broker.Common.Utility.MyRSI", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CandleId");

                    b.Property<decimal>("RSIValue");

                    b.Property<ulong>("Timestamp");

                    b.HasKey("Id");

                    b.HasIndex("CandleId");

                    b.ToTable("MyRSIs");
                });

            modelBuilder.Entity("Broker.Common.Utility.MySetup", b =>
                {
                    b.Property<string>("Key")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Value");

                    b.HasKey("Key");

                    b.ToTable("MySetups");
                });

            modelBuilder.Entity("Broker.Common.Utility.MyTicker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Ask");

                    b.Property<decimal>("Bid");

                    b.Property<decimal>("LastTrade");

                    b.Property<int?>("SettingsId");

                    b.Property<ulong>("Timestamp");

                    b.Property<decimal>("Volume");

                    b.HasKey("Id");

                    b.HasIndex("SettingsId");

                    b.ToTable("MyTickers");
                });

            modelBuilder.Entity("Broker.Common.WebAPI.Models.MyWebAPISettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Asset");

                    b.Property<string>("Currency");

                    b.Property<int>("PrecisionAsset");

                    b.Property<int>("PrecisionCurrency");

                    b.Property<string>("Separator");

                    b.HasKey("Id");

                    b.ToTable("MyWebAPISettings");
                });

            modelBuilder.Entity("Broker.Common.Utility.MyBalance", b =>
                {
                    b.HasOne("Broker.Common.Utility.MyCandle", "Candle")
                        .WithMany()
                        .HasForeignKey("CandleId");

                    b.HasOne("Broker.Common.WebAPI.Models.MyWebAPISettings", "Settings")
                        .WithMany()
                        .HasForeignKey("SettingsId");
                });

            modelBuilder.Entity("Broker.Common.Utility.MyCandle", b =>
                {
                    b.HasOne("Broker.Common.WebAPI.Models.MyWebAPISettings", "Settings")
                        .WithMany()
                        .HasForeignKey("SettingsId");
                });

            modelBuilder.Entity("Broker.Common.Utility.MyMACD", b =>
                {
                    b.HasOne("Broker.Common.Utility.MyCandle", "Candle")
                        .WithMany()
                        .HasForeignKey("CandleId");
                });

            modelBuilder.Entity("Broker.Common.Utility.MyMomentum", b =>
                {
                    b.HasOne("Broker.Common.Utility.MyCandle", "Candle")
                        .WithMany()
                        .HasForeignKey("CandleId");
                });

            modelBuilder.Entity("Broker.Common.Utility.MyOrder", b =>
                {
                    b.HasOne("Broker.Common.WebAPI.Models.MyWebAPISettings", "Settings")
                        .WithMany()
                        .HasForeignKey("SettingsId");
                });

            modelBuilder.Entity("Broker.Common.Utility.MyRSI", b =>
                {
                    b.HasOne("Broker.Common.Utility.MyCandle", "Candle")
                        .WithMany()
                        .HasForeignKey("CandleId");
                });

            modelBuilder.Entity("Broker.Common.Utility.MyTicker", b =>
                {
                    b.HasOne("Broker.Common.WebAPI.Models.MyWebAPISettings", "Settings")
                        .WithMany()
                        .HasForeignKey("SettingsId");
                });
#pragma warning restore 612, 618
        }
    }
}
